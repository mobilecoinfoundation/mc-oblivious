# vim: tabstop=2 softtabstop=2 shiftwidth=2 expandtab:

version: 2.1

defaults:
  builder-install: &builder-install gcr.io/mobilenode-211420/builder-install:1_12
  default-environment: &default-environment
    RUST_BACKTRACE: 1
    SKIP_SLOW_TESTS: 1
    CARGO_INCREMENTAL: 0

executors:
  build-executor:
    docker:
      - image: *builder-install
    resource_class: large

  test-executor:
    docker:
      - image: *builder-install
    resource_class: large

commands:
  print_versions:
    description: Version Info
    steps:
      - run:
          name: Version Info
          command: |
            rustc --version
            cargo --version
            rustup --version
  env_setup:
    description: Environment Setup
    steps:
      - run:
          name: Configure Cargo to use git cli
          command: |
            mkdir -p ~/.cargo
            echo '[net]' >> ~/.cargo/config
            echo 'git-fetch-with-cli = true' >> ~/.cargo/config
            if [ -f ~/.gitconfig ]; then
              sed -i -e 's/github/git-non-exist-hub/g' ~/.gitconfig # https://github.com/rust-lang/cargo/issues/3900
            fi

  restore-cargo-cache:
    steps:
      - restore_cache:
          name: Restore Cargo cache
          key: v0-cargo-{{ arch }}

  save-cargo-cache:
    steps:
      - run:
          name: Prepare Cargo cache for saving
          command: |
            set -x
            command -v cargo-install-update >/dev/null || cargo install cargo-update
            command -v cargo-trim >/dev/null || cargo install cargo-trim
            cargo install-update --all
            # Configure cargo-trim with the project's Cargo.lock files
            mkdir -p ~/.config
            cargo trim --directory "$(pwd)"
            # Clean dependencies not in the Cargo.lock
            time cargo trim --orphan-clean
            # Make sure all dependencies are downloaded, since there appears to be
            # a bug where cargo trim erroneously removes certain git repos.
            time cargo fetch
            # Remove the registry src dir since it's the largest dir and it's
            # recreatable from the archives in ~/.cargo/cache
            time cargo trim --wipe src
            # Run git compress on cached repos
            time cargo trim --gc all
            # Display Cargo cache stats
            cargo trim --query
            # Uninstall binary cargo crates that don't need to be cached
            time cargo uninstall cargo-trim cargo-update
      - save_cache:
          name: Save Cargo cache
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: v0-cargo-{{ arch }}-{{ .Revision }}
          # https://doc.rust-lang.org/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci
          paths:
            - ~/.cargo/.crates.toml
            - ~/.cargo/bin
            - ~/.cargo/git/checkout
            - ~/.cargo/git/db
            - ~/.cargo/registry/cache
            - ~/.cargo/registry/index
      - record-cargo-cache-stats

  record-cargo-cache-stats:
    steps:
      - run:
          name: Print Cargo cache statistics
          command: |
            cargo cache
            cargo cache local

  install-rust:
    steps:
      - run:
          name: Install Rust
          command: |
            command -v rustup >/dev/null || \
              curl https://sh.rustup.rs --tlsv1.2 -sSf | sh -s -- -y --default-toolchain none
            # Installs the toolchain specified in `rust-toolchain`
            "$HOME/.cargo/bin/rustup" show active-toolchain
  install-ci-deps:
    steps:
      - run:
          name: Install CI dependencies
          command: |
            command -v cargo-cache >/dev/null || cargo install cargo-cache
            command -v cargo2junit >/dev/null || cargo install cargo2junit
  prefetch-cargo-deps:
    steps:
      - run:
          name: Fetch project Cargo dependencies
          command: |
            set -x
            time cargo fetch
  prepare-for-build:
    steps:
      - checkout
      - install-rust
      - restore-cargo-cache
      - install-ci-deps
      - env_setup
      - prefetch-cargo-deps

  run-tests:
    parameters:
      test_command:
        type: string
        default: cargo test
    steps:
      - run:
          name: Run all tests
          command: |
            << parameters.test_command >> -- -Z unstable-options --format json --report-time \
              | tee /tmp/test-results.json
            cat /tmp/test-results.json | cargo2junit > /tmp/test-results.xml || true
  post-test:
    steps:
      - store_test_results:
          path: /tmp/test-results.xml
      - store_artifacts:
          path: /tmp/test-results.xml

  check-dirty-git:
    steps:
      - run:
          name: Checking dirty git
          command: |
            if [[ -n $(git status --porcelain) ]]; then
              echo "repo is dirty"
              git status
              exit 1
            fi

  run-benchmarks:
    steps:
      - run:
          name: Building and running benchmarks
          command: |
            cargo bench

jobs:

  # Run all tests on a single container
  run-all-tests:
    executor: build-executor
    parallelism: 1
    environment:
      <<: *default-environment
    steps:
      - prepare-for-build
      - run-tests
      - check-dirty-git
      - post-test

  # Run all test in release
  run-all-tests-release:
    executor: build-executor
    parallelism: 1
    environment:
      <<: *default-environment
    steps:
      - prepare-for-build
      - run-tests:
          test_command: "cargo test --release"
      - check-dirty-git
      - post-test

  # Run all benchmarks
  run-all-benchmarks:
    executor: build-executor
    parallelism: 1
    environment:
      <<: *default-environment
    steps:
      - prepare-for-build
      - run-benchmarks
      - check-dirty-git

  # Run no-asm tests
  run-no-asm-tests:
    executor: build-executor
    parallelism: 1
    environment:
      <<: *default-environment
    steps:
      - prepare-for-build
      - run-tests:
          test_command: "cd no-asm-tests && cargo test --release"
      - check-dirty-git
      - post-test

  # Build and lint in debug mode
  build-all-and-lint-debug:
    parameters:
      test_save_cache:
        type: boolean
        default: true
    executor: build-executor
    environment:
      << : *default-environment
    steps:
      - prepare-for-build
      - run:
          name: Cargo check
          command: cargo check
      - check-dirty-git

      # The lint and saving of caches happens here since this job is faster than the run-all-tests job.
      # This results in shorter CI times.
      - run:
          name: Lint/fmt
          command: |
            ./tools/lint.sh
      - when:
          condition:
            or:
             - { equal: [ << pipeline.git.branch >>, master ] }
             - { equal: [ true, << pipeline.parameters.test_save_cache >>]}
          steps: [ save-cargo-cache ]

workflows:
  version: 2
  # Build and run tests on a single container
  build-and-run-all-tests:
    jobs:
      # Run tests on a single container
      - run-all-tests
      - run-all-tests-release
      - run-no-asm-tests
      - run-all-benchmarks
      # Build and lint everything in debug
      - build-all-and-lint-debug
